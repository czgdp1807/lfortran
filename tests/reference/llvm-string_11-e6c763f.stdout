; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [31 x i8] c"                              \00", align 1
@1 = private unnamed_addr constant [11 x i8] c"          \00", align 1
@2 = private unnamed_addr constant [15 x i8] c"This is a test\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@6 = private unnamed_addr constant [18 x i8] c"test is not found\00", align 1
@7 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@10 = private unnamed_addr constant [25 x i8] c"test is found at index: \00", align 1
@11 = private unnamed_addr constant [9 x i8] c"%s%s%d%s\00", align 1

declare void @__module_lfortran_intrinsic_builtin_execute_command_line(i8**, i1*, i1*, i32*, i1*, i32*, i1*, i8**, i1*)

declare void @__module_lfortran_intrinsic_builtin_get_command_argument(i32*, i8**, i1*, i32*, i1*, i32*, i1*)

declare void @__module_lfortran_intrinsic_builtin_get_environment_variable(i8**, i8**, i1*, i32*, i1*, i32*, i1*, i1*, i1*)

declare i32 @__module_lfortran_intrinsic_builtin_len(i8**, i32*, i1*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

define void @__module_lfortran_intrinsic_string_date_and_time(i8** %date, i1* %is_date_present_, i8** %time, i1* %is_time_present_, i8** %zone, i1* %is_zone_present_, i32* %values, i1* %is_values_present_) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @__module_lfortran_intrinsic_string_index(i8** %string_, i8** %substring_) {
.entry:
  %call_arg_value2 = alloca i1, align 1
  %call_arg_value = alloca i1, align 1
  %found = alloca i1, align 1
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pos = alloca i32, align 4
  store i1 true, i1* %found, align 1
  store i32 0, i32* %idx, align 4
  store i32 1, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont6, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = alloca i32, align 4
  store i1 false, i1* %call_arg_value, align 1
  %2 = call i32 @_lfortran_str_len(i8** %string_)
  %3 = icmp slt i32 %0, %2
  %4 = load i1, i1* %found, align 1
  %5 = and i1 %3, %4
  br i1 %5, label %loop.body, label %loop.end7

loop.body:                                        ; preds = %loop.head
  store i32 0, i32* %k, align 4
  store i32 1, i32* %j, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %ifcont, %loop.body
  %6 = load i32, i32* %j, align 4
  %7 = alloca i32, align 4
  store i1 false, i1* %call_arg_value2, align 1
  %8 = call i32 @_lfortran_str_len(i8** %substring_)
  %9 = icmp slt i32 %6, %8
  %10 = load i1, i1* %found, align 1
  %11 = and i1 %9, %10
  br i1 %11, label %loop.body3, label %loop.end

loop.body3:                                       ; preds = %loop.head1
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %k, align 4
  %14 = add i32 %12, %13
  store i32 %14, i32* %pos, align 4
  %15 = load i32, i32* %pos, align 4
  %16 = load i8*, i8** %string_, align 8
  %17 = call i8* @_lfortran_str_copy(i8* %16, i32 %15, i32 %15)
  %18 = alloca i8*, align 8
  store i8* %17, i8** %18, align 8
  %19 = load i8*, i8** %18, align 8
  %20 = load i32, i32* %j, align 4
  %21 = load i8*, i8** %substring_, align 8
  %22 = call i8* @_lfortran_str_copy(i8* %21, i32 %20, i32 %20)
  %23 = alloca i8*, align 8
  store i8* %22, i8** %23, align 8
  %24 = load i8*, i8** %23, align 8
  %25 = alloca i8*, align 8
  store i8* %19, i8** %25, align 8
  %26 = alloca i8*, align 8
  store i8* %24, i8** %26, align 8
  %27 = call i1 @_lpython_str_compare_noteq(i8** %25, i8** %26)
  br i1 %27, label %then, label %else

then:                                             ; preds = %loop.body3
  store i1 false, i1* %found, align 1
  br label %ifcont

else:                                             ; preds = %loop.body3
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %28 = load i32, i32* %k, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %k, align 4
  %30 = load i32, i32* %j, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %j, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %32 = load i1, i1* %found, align 1
  br i1 %32, label %then4, label %else5

then4:                                            ; preds = %loop.end
  %33 = load i32, i32* %i, align 4
  store i32 %33, i32* %idx, align 4
  store i1 false, i1* %found, align 1
  br label %ifcont6

else5:                                            ; preds = %loop.end
  store i1 true, i1* %found, align 1
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %34 = load i32, i32* %i, align 4
  %35 = add i32 %34, 1
  store i32 %35, i32* %i, align 4
  br label %loop.head

loop.end7:                                        ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end7
  %36 = load i32, i32* %idx, align 4
  ret i32 %36
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_copy(i8*, i32, i32)

declare i1 @_lpython_str_compare_noteq(i8**, i8**)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_set_argv(i32 %0, i8** %1)
  %mystring = alloca i8*, align 8
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @0, i32 0, i32 0), i8** %mystring, align 8
  %teststring = alloca i8*, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i32 0, i32 0), i8** %teststring, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i32 0, i32 0), i8** %mystring, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8** %teststring, align 8
  %2 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring)
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = call i32 @__module_lfortran_intrinsic_string_index(i8** %mystring, i8** %teststring)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lpython_set_argv(i32, i8**)

declare void @_lfortran_printf(i8*, ...)
